import "@/app/globals.css";
import { classes } from "@/utils";
import { getSessionCookie } from "@/utils/serverUtils";

// components
import DashboardNavigationOverlay from "@/components/dashboard/dashboardNavigationOverlay";
import DashboardLayoutFooter from "@/components/dashboard/dasboardLayoutFooter";
import DashboardHeader from "@/components/dashboard/dashboardLayoutHeader";

// services
import CategoryService from "@/services/CategoryService";
import NotificationService from "@/services/NotificationService";
import UserService from "@/services/UserService";

// types
import type { Metadata } from "next";
import type { ProfileType } from "@/types/UserTypes";
import type { CategoryType } from "@/types/CategoryTypes";
import type { NotificationType } from "@/types/NotificationTypes";
import type { IconType, SvgProps } from "@/types/IconTypes";

const { getDashboardCategories } = CategoryService.Api;
const { getDashboardNotifications } = NotificationService.Api;
const { getDashboardProfile } = UserService.Api;

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function DashboardLayoutPageWrapper({
  children,
  props,
}: {
  children: React.ReactNode;
  props?: {
    showCategories?: boolean;
    header: {
      action?: {
        href: string;
        icon: IconType;
        svgClassName?: SvgProps["className"];
        label?: string;
      };
      title: string;
    };
  };
}) {
  const session = await getSessionCookie();

  let categories: CategoryType[] = [];
  let notifications: NotificationType[] = [];
  let profile: ProfileType | undefined;

  try {
    const [categoriesRequest, notificationsRequest, profileRequest] =
      await Promise.all([
        getDashboardCategories({ session }),
        getDashboardNotifications({ session }),
        getDashboardProfile({ session }),
      ]);

    if (categoriesRequest.response.ok) categories = categoriesRequest.json;
    if (notificationsRequest.response.ok)
      notifications = notificationsRequest.json;
    if (profileRequest.response.ok) profile = profileRequest.json;
  } catch (e) {
    if (process.env.VITE_DEBUG) console.error(e);
  }

  if (process.env.VITE_DEBUG) {
    console.log("categories: ", categories);
    console.log("notifications: ", notifications);
    console.log("profile: ", profile);
  }

  return (
    <main className={mainClassName} id="app">
      <DashboardHeader action={props?.header.action}>
        {props?.header.title}
      </DashboardHeader>
      <section
        id="content"
        className="overflow-y-auto overflow-x-hidden letter-spacing-2"
        style={{ gridArea: "basecontent" }}
      >
        {children}
      </section>
      <DashboardLayoutFooter notifications={notifications} />
      <DashboardNavigationOverlay
        profile={profile}
        categories={categories}
        links={[
          { path: "/dashboard", label: "Home", icon: "home" },
          {
            path: "/dashboard/notifications",
            label: "Notifications",
            icon: "bell",
          },
          { path: "/dashboard/profile", label: "Profile", icon: "profile" },
          { path: "/dashboard/projects", label: "Projects", icon: "projects" },
          { path: "/dashboard/posts", label: "Posts", icon: "article" },
          { path: "/dashboard/categories", label: "Categories", icon: "tags" },
        ]}
      />
    </main>
  );
}

const mainClassName = classes([
  "display-grid",
  "font-orbitron-medium",
  "full-width",
  "height-view-100",
  "overflow-hidden",
]);
